/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { cancelTransaction } from '../fn/share-transaction-controller/cancel-transaction';
import { CancelTransaction$Params } from '../fn/share-transaction-controller/cancel-transaction';
import { completeTransaction } from '../fn/share-transaction-controller/complete-transaction';
import { CompleteTransaction$Params } from '../fn/share-transaction-controller/complete-transaction';
import { getAllTransactionStatistics } from '../fn/share-transaction-controller/get-all-transaction-statistics';
import { GetAllTransactionStatistics$Params } from '../fn/share-transaction-controller/get-all-transaction-statistics';
import { getPendingTransactions } from '../fn/share-transaction-controller/get-pending-transactions';
import { GetPendingTransactions$Params } from '../fn/share-transaction-controller/get-pending-transactions';
import { getRecentTransactions } from '../fn/share-transaction-controller/get-recent-transactions';
import { GetRecentTransactions$Params } from '../fn/share-transaction-controller/get-recent-transactions';
import { getShareTransactions } from '../fn/share-transaction-controller/get-share-transactions';
import { GetShareTransactions$Params } from '../fn/share-transaction-controller/get-share-transactions';
import { getTransactionById } from '../fn/share-transaction-controller/get-transaction-by-id';
import { GetTransactionById$Params } from '../fn/share-transaction-controller/get-transaction-by-id';
import { getTransactionStatistics } from '../fn/share-transaction-controller/get-transaction-statistics';
import { GetTransactionStatistics$Params } from '../fn/share-transaction-controller/get-transaction-statistics';
import { requestBuyShares } from '../fn/share-transaction-controller/request-buy-shares';
import { RequestBuyShares$Params } from '../fn/share-transaction-controller/request-buy-shares';
import { requestSellShares } from '../fn/share-transaction-controller/request-sell-shares';
import { RequestSellShares$Params } from '../fn/share-transaction-controller/request-sell-shares';

@Injectable({ providedIn: 'root' })
export class ShareTransactionControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `completeTransaction()` */
  static readonly CompleteTransactionPath = '/api/transactions/{transactionId}/complete';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `completeTransaction()` instead.
   *
   * This method doesn't expect any request body.
   */
  completeTransaction$Response(params: CompleteTransaction$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return completeTransaction(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `completeTransaction$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  completeTransaction(params: CompleteTransaction$Params, context?: HttpContext): Observable<{
}> {
    return this.completeTransaction$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `cancelTransaction()` */
  static readonly CancelTransactionPath = '/api/transactions/{transactionId}/cancel';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `cancelTransaction()` instead.
   *
   * This method doesn't expect any request body.
   */
  cancelTransaction$Response(params: CancelTransaction$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return cancelTransaction(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `cancelTransaction$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  cancelTransaction(params: CancelTransaction$Params, context?: HttpContext): Observable<{
}> {
    return this.cancelTransaction$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `requestSellShares()` */
  static readonly RequestSellSharesPath = '/api/transactions/sell';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `requestSellShares()` instead.
   *
   * This method doesn't expect any request body.
   */
  requestSellShares$Response(params: RequestSellShares$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return requestSellShares(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `requestSellShares$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  requestSellShares(params: RequestSellShares$Params, context?: HttpContext): Observable<{
}> {
    return this.requestSellShares$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `requestBuyShares()` */
  static readonly RequestBuySharesPath = '/api/transactions/buy';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `requestBuyShares()` instead.
   *
   * This method doesn't expect any request body.
   */
  requestBuyShares$Response(params: RequestBuyShares$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return requestBuyShares(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `requestBuyShares$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  requestBuyShares(params: RequestBuyShares$Params, context?: HttpContext): Observable<{
}> {
    return this.requestBuyShares$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `getTransactionById()` */
  static readonly GetTransactionByIdPath = '/api/transactions/{transactionId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTransactionById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTransactionById$Response(params: GetTransactionById$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return getTransactionById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTransactionById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTransactionById(params: GetTransactionById$Params, context?: HttpContext): Observable<{
}> {
    return this.getTransactionById$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `getAllTransactionStatistics()` */
  static readonly GetAllTransactionStatisticsPath = '/api/transactions/statistics';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllTransactionStatistics()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllTransactionStatistics$Response(params?: GetAllTransactionStatistics$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return getAllTransactionStatistics(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllTransactionStatistics$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllTransactionStatistics(params?: GetAllTransactionStatistics$Params, context?: HttpContext): Observable<{
}> {
    return this.getAllTransactionStatistics$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `getShareTransactions()` */
  static readonly GetShareTransactionsPath = '/api/transactions/shareholder/{shareholderId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getShareTransactions()` instead.
   *
   * This method doesn't expect any request body.
   */
  getShareTransactions$Response(params: GetShareTransactions$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return getShareTransactions(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getShareTransactions$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getShareTransactions(params: GetShareTransactions$Params, context?: HttpContext): Observable<{
}> {
    return this.getShareTransactions$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `getTransactionStatistics()` */
  static readonly GetTransactionStatisticsPath = '/api/transactions/shareholder/{shareholderId}/statistics';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTransactionStatistics()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTransactionStatistics$Response(params: GetTransactionStatistics$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return getTransactionStatistics(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTransactionStatistics$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTransactionStatistics(params: GetTransactionStatistics$Params, context?: HttpContext): Observable<{
}> {
    return this.getTransactionStatistics$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `getRecentTransactions()` */
  static readonly GetRecentTransactionsPath = '/api/transactions/shareholder/{shareholderId}/recent';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getRecentTransactions()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRecentTransactions$Response(params: GetRecentTransactions$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return getRecentTransactions(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getRecentTransactions$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRecentTransactions(params: GetRecentTransactions$Params, context?: HttpContext): Observable<{
}> {
    return this.getRecentTransactions$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `getPendingTransactions()` */
  static readonly GetPendingTransactionsPath = '/api/transactions/pending';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getPendingTransactions()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPendingTransactions$Response(params?: GetPendingTransactions$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return getPendingTransactions(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getPendingTransactions$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPendingTransactions(params?: GetPendingTransactions$Params, context?: HttpContext): Observable<{
}> {
    return this.getPendingTransactions$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

}
