/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createProduct } from '../fn/products/create-product';
import { CreateProduct$Params } from '../fn/products/create-product';
import { createProductWithImages } from '../fn/products/create-product-with-images';
import { CreateProductWithImages$Params } from '../fn/products/create-product-with-images';
import { deleteProduct } from '../fn/products/delete-product';
import { DeleteProduct$Params } from '../fn/products/delete-product';
import { deleteProductImage } from '../fn/products/delete-product-image';
import { DeleteProductImage$Params } from '../fn/products/delete-product-image';
import { getAllProducts } from '../fn/products/get-all-products';
import { GetAllProducts$Params } from '../fn/products/get-all-products';
import { getProductById } from '../fn/products/get-product-by-id';
import { GetProductById$Params } from '../fn/products/get-product-by-id';
import { Product } from '../models/product';
import { updateProduct } from '../fn/products/update-product';
import { UpdateProduct$Params } from '../fn/products/update-product';
import { uploadProductImages } from '../fn/products/upload-product-images';
import { UploadProductImages$Params } from '../fn/products/upload-product-images';

@Injectable({ providedIn: 'root' })
export class ProductsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getProductById()` */
  static readonly GetProductByIdPath = '/api/products/{id}';

  /**
   * Get product by ID.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getProductById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getProductById$Response(params: GetProductById$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return getProductById(this.http, this.rootUrl, params, context);
  }

  /**
   * Get product by ID.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getProductById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getProductById(params: GetProductById$Params, context?: HttpContext): Observable<{
}> {
    return this.getProductById$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `updateProduct()` */
  static readonly UpdateProductPath = '/api/products/{id}';

  /**
   * Update product.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateProduct()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateProduct$Response(params: UpdateProduct$Params, context?: HttpContext): Observable<StrictHttpResponse<{
[key: string]: {
};
}>> {
    return updateProduct(this.http, this.rootUrl, params, context);
  }

  /**
   * Update product.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateProduct$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateProduct(params: UpdateProduct$Params, context?: HttpContext): Observable<{
[key: string]: {
};
}> {
    return this.updateProduct$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
[key: string]: {
};
}>): {
[key: string]: {
};
} => r.body)
    );
  }

  /** Path part for operation `deleteProduct()` */
  static readonly DeleteProductPath = '/api/products/{id}';

  /**
   * Delete product.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteProduct()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteProduct$Response(params: DeleteProduct$Params, context?: HttpContext): Observable<StrictHttpResponse<{
[key: string]: {
};
}>> {
    return deleteProduct(this.http, this.rootUrl, params, context);
  }

  /**
   * Delete product.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteProduct$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteProduct(params: DeleteProduct$Params, context?: HttpContext): Observable<{
[key: string]: {
};
}> {
    return this.deleteProduct$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
[key: string]: {
};
}>): {
[key: string]: {
};
} => r.body)
    );
  }

  /** Path part for operation `getAllProducts()` */
  static readonly GetAllProductsPath = '/api/products';

  /**
   * Get all products.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllProducts()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllProducts$Response(params?: GetAllProducts$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Product>>> {
    return getAllProducts(this.http, this.rootUrl, params, context);
  }

  /**
   * Get all products.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllProducts$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllProducts(params?: GetAllProducts$Params, context?: HttpContext): Observable<Array<Product>> {
    return this.getAllProducts$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Product>>): Array<Product> => r.body)
    );
  }

  /** Path part for operation `createProduct()` */
  static readonly CreateProductPath = '/api/products';

  /**
   * Create product without images.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createProduct()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createProduct$Response(params: CreateProduct$Params, context?: HttpContext): Observable<StrictHttpResponse<{
[key: string]: {
};
}>> {
    return createProduct(this.http, this.rootUrl, params, context);
  }

  /**
   * Create product without images.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createProduct$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createProduct(params: CreateProduct$Params, context?: HttpContext): Observable<{
[key: string]: {
};
}> {
    return this.createProduct$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
[key: string]: {
};
}>): {
[key: string]: {
};
} => r.body)
    );
  }

  /** Path part for operation `uploadProductImages()` */
  static readonly UploadProductImagesPath = '/api/products/{id}/images';

  /**
   * Upload product images.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `uploadProductImages()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadProductImages$Response(params: UploadProductImages$Params, context?: HttpContext): Observable<StrictHttpResponse<{
[key: string]: {
};
}>> {
    return uploadProductImages(this.http, this.rootUrl, params, context);
  }

  /**
   * Upload product images.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `uploadProductImages$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadProductImages(params: UploadProductImages$Params, context?: HttpContext): Observable<{
[key: string]: {
};
}> {
    return this.uploadProductImages$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
[key: string]: {
};
}>): {
[key: string]: {
};
} => r.body)
    );
  }

  /** Path part for operation `deleteProductImage()` */
  static readonly DeleteProductImagePath = '/api/products/{id}/images';

  /**
   * Delete product image.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteProductImage()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteProductImage$Response(params: DeleteProductImage$Params, context?: HttpContext): Observable<StrictHttpResponse<{
[key: string]: {
};
}>> {
    return deleteProductImage(this.http, this.rootUrl, params, context);
  }

  /**
   * Delete product image.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteProductImage$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteProductImage(params: DeleteProductImage$Params, context?: HttpContext): Observable<{
[key: string]: {
};
}> {
    return this.deleteProductImage$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
[key: string]: {
};
}>): {
[key: string]: {
};
} => r.body)
    );
  }

  /** Path part for operation `createProductWithImages()` */
  static readonly CreateProductWithImagesPath = '/api/products/with-images';

  /**
   * Create product with images.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createProductWithImages()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  createProductWithImages$Response(params: CreateProductWithImages$Params, context?: HttpContext): Observable<StrictHttpResponse<{
[key: string]: {
};
}>> {
    return createProductWithImages(this.http, this.rootUrl, params, context);
  }

  /**
   * Create product with images.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createProductWithImages$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  createProductWithImages(params: CreateProductWithImages$Params, context?: HttpContext): Observable<{
[key: string]: {
};
}> {
    return this.createProductWithImages$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
[key: string]: {
};
}>): {
[key: string]: {
};
} => r.body)
    );
  }

}
