/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createMemberWithImages } from '../fn/members/create-member-with-images';
import { CreateMemberWithImages$Params } from '../fn/members/create-member-with-images';
import { DeletedMember } from '../models/deleted-member';
import { deleteMember } from '../fn/members/delete-member';
import { DeleteMember$Params } from '../fn/members/delete-member';
import { getAllMembers } from '../fn/members/get-all-members';
import { GetAllMembers$Params } from '../fn/members/get-all-members';
import { getDeletedMembers } from '../fn/members/get-deleted-members';
import { GetDeletedMembers$Params } from '../fn/members/get-deleted-members';
import { getMemberById } from '../fn/members/get-member-by-id';
import { GetMemberById$Params } from '../fn/members/get-member-by-id';
import { Member } from '../models/member';
import { updateMemberWithImages } from '../fn/members/update-member-with-images';
import { UpdateMemberWithImages$Params } from '../fn/members/update-member-with-images';

@Injectable({ providedIn: 'root' })
export class MembersService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateMemberWithImages()` */
  static readonly UpdateMemberWithImagesPath = '/api/members/{id}/with-images';

  /**
   * Update existing member with optional images.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateMemberWithImages()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  updateMemberWithImages$Response(params: UpdateMemberWithImages$Params, context?: HttpContext): Observable<StrictHttpResponse<{
[key: string]: {
};
}>> {
    return updateMemberWithImages(this.http, this.rootUrl, params, context);
  }

  /**
   * Update existing member with optional images.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateMemberWithImages$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  updateMemberWithImages(params: UpdateMemberWithImages$Params, context?: HttpContext): Observable<{
[key: string]: {
};
}> {
    return this.updateMemberWithImages$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
[key: string]: {
};
}>): {
[key: string]: {
};
} => r.body)
    );
  }

  /** Path part for operation `getAllMembers()` */
  static readonly GetAllMembersPath = '/api/members';

  /**
   * Get all members.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllMembers()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllMembers$Response(params?: GetAllMembers$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Member>>> {
    return getAllMembers(this.http, this.rootUrl, params, context);
  }

  /**
   * Get all members.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllMembers$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllMembers(params?: GetAllMembers$Params, context?: HttpContext): Observable<Array<Member>> {
    return this.getAllMembers$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Member>>): Array<Member> => r.body)
    );
  }

  /** Path part for operation `createMemberWithImages()` */
  static readonly CreateMemberWithImagesPath = '/api/members';

  /**
   * Create new member with images (all images mandatory).
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createMemberWithImages()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  createMemberWithImages$Response(params: CreateMemberWithImages$Params, context?: HttpContext): Observable<StrictHttpResponse<{
[key: string]: {
};
}>> {
    return createMemberWithImages(this.http, this.rootUrl, params, context);
  }

  /**
   * Create new member with images (all images mandatory).
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createMemberWithImages$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  createMemberWithImages(params: CreateMemberWithImages$Params, context?: HttpContext): Observable<{
[key: string]: {
};
}> {
    return this.createMemberWithImages$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
[key: string]: {
};
}>): {
[key: string]: {
};
} => r.body)
    );
  }

  /** Path part for operation `getMemberById()` */
  static readonly GetMemberByIdPath = '/api/members/{id}';

  /**
   * Get member by ID.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getMemberById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMemberById$Response(params: GetMemberById$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return getMemberById(this.http, this.rootUrl, params, context);
  }

  /**
   * Get member by ID.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getMemberById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMemberById(params: GetMemberById$Params, context?: HttpContext): Observable<{
}> {
    return this.getMemberById$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `deleteMember()` */
  static readonly DeleteMemberPath = '/api/members/{id}';

  /**
   * Delete member by ID (moves to deleted_members and deletes images).
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteMember()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteMember$Response(params: DeleteMember$Params, context?: HttpContext): Observable<StrictHttpResponse<{
[key: string]: {
};
}>> {
    return deleteMember(this.http, this.rootUrl, params, context);
  }

  /**
   * Delete member by ID (moves to deleted_members and deletes images).
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteMember$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteMember(params: DeleteMember$Params, context?: HttpContext): Observable<{
[key: string]: {
};
}> {
    return this.deleteMember$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
[key: string]: {
};
}>): {
[key: string]: {
};
} => r.body)
    );
  }

  /** Path part for operation `getDeletedMembers()` */
  static readonly GetDeletedMembersPath = '/api/members/deleted';

  /**
   * Get all deleted members.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getDeletedMembers()` instead.
   *
   * This method doesn't expect any request body.
   */
  getDeletedMembers$Response(params?: GetDeletedMembers$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<DeletedMember>>> {
    return getDeletedMembers(this.http, this.rootUrl, params, context);
  }

  /**
   * Get all deleted members.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getDeletedMembers$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getDeletedMembers(params?: GetDeletedMembers$Params, context?: HttpContext): Observable<Array<DeletedMember>> {
    return this.getDeletedMembers$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<DeletedMember>>): Array<DeletedMember> => r.body)
    );
  }

}
