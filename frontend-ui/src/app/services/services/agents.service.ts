/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { Agent } from '../models/agent';
import { createAgent } from '../fn/agents/create-agent';
import { CreateAgent$Params } from '../fn/agents/create-agent';
import { deleteAgent } from '../fn/agents/delete-agent';
import { DeleteAgent$Params } from '../fn/agents/delete-agent';
import { DeletedAgent } from '../models/deleted-agent';
import { getAgentById } from '../fn/agents/get-agent-by-id';
import { GetAgentById$Params } from '../fn/agents/get-agent-by-id';
import { getAgentsByStatus } from '../fn/agents/get-agents-by-status';
import { GetAgentsByStatus$Params } from '../fn/agents/get-agents-by-status';
import { getAllAgents } from '../fn/agents/get-all-agents';
import { GetAllAgents$Params } from '../fn/agents/get-all-agents';
import { getDeletedAgents } from '../fn/agents/get-deleted-agents';
import { GetDeletedAgents$Params } from '../fn/agents/get-deleted-agents';
import { updateAgent } from '../fn/agents/update-agent';
import { UpdateAgent$Params } from '../fn/agents/update-agent';
import { updateAgentStatus } from '../fn/agents/update-agent-status';
import { UpdateAgentStatus$Params } from '../fn/agents/update-agent-status';

@Injectable({ providedIn: 'root' })
export class AgentsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getAgentById()` */
  static readonly GetAgentByIdPath = '/api/agents/{id}';

  /**
   * Get agent by ID.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAgentById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAgentById$Response(params: GetAgentById$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return getAgentById(this.http, this.rootUrl, params, context);
  }

  /**
   * Get agent by ID.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAgentById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAgentById(params: GetAgentById$Params, context?: HttpContext): Observable<{
}> {
    return this.getAgentById$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `updateAgent()` */
  static readonly UpdateAgentPath = '/api/agents/{id}';

  /**
   * Update existing agent.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateAgent()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateAgent$Response(params: UpdateAgent$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return updateAgent(this.http, this.rootUrl, params, context);
  }

  /**
   * Update existing agent.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateAgent$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateAgent(params: UpdateAgent$Params, context?: HttpContext): Observable<{
}> {
    return this.updateAgent$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `deleteAgent()` */
  static readonly DeleteAgentPath = '/api/agents/{id}';

  /**
   * Delete agent by ID.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteAgent()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteAgent$Response(params: DeleteAgent$Params, context?: HttpContext): Observable<StrictHttpResponse<{
[key: string]: {
};
}>> {
    return deleteAgent(this.http, this.rootUrl, params, context);
  }

  /**
   * Delete agent by ID.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteAgent$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteAgent(params: DeleteAgent$Params, context?: HttpContext): Observable<{
[key: string]: {
};
}> {
    return this.deleteAgent$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
[key: string]: {
};
}>): {
[key: string]: {
};
} => r.body)
    );
  }

  /** Path part for operation `updateAgentStatus()` */
  static readonly UpdateAgentStatusPath = '/api/agents/{id}/status';

  /**
   * Update agent status.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateAgentStatus()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateAgentStatus$Response(params: UpdateAgentStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return updateAgentStatus(this.http, this.rootUrl, params, context);
  }

  /**
   * Update agent status.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateAgentStatus$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateAgentStatus(params: UpdateAgentStatus$Params, context?: HttpContext): Observable<{
}> {
    return this.updateAgentStatus$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `getAllAgents()` */
  static readonly GetAllAgentsPath = '/api/agents';

  /**
   * Get all agents.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllAgents()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllAgents$Response(params?: GetAllAgents$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Agent>>> {
    return getAllAgents(this.http, this.rootUrl, params, context);
  }

  /**
   * Get all agents.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllAgents$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllAgents(params?: GetAllAgents$Params, context?: HttpContext): Observable<Array<Agent>> {
    return this.getAllAgents$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Agent>>): Array<Agent> => r.body)
    );
  }

  /** Path part for operation `createAgent()` */
  static readonly CreateAgentPath = '/api/agents';

  /**
   * Create a new agent.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createAgent()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createAgent$Response(params: CreateAgent$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return createAgent(this.http, this.rootUrl, params, context);
  }

  /**
   * Create a new agent.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createAgent$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createAgent(params: CreateAgent$Params, context?: HttpContext): Observable<{
}> {
    return this.createAgent$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `getAgentsByStatus()` */
  static readonly GetAgentsByStatusPath = '/api/agents/status/{status}';

  /**
   * Get agents by status.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAgentsByStatus()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAgentsByStatus$Response(params: GetAgentsByStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Agent>>> {
    return getAgentsByStatus(this.http, this.rootUrl, params, context);
  }

  /**
   * Get agents by status.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAgentsByStatus$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAgentsByStatus(params: GetAgentsByStatus$Params, context?: HttpContext): Observable<Array<Agent>> {
    return this.getAgentsByStatus$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Agent>>): Array<Agent> => r.body)
    );
  }

  /** Path part for operation `getDeletedAgents()` */
  static readonly GetDeletedAgentsPath = '/api/agents/deleted';

  /**
   * Get all deleted agents (deletion history).
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getDeletedAgents()` instead.
   *
   * This method doesn't expect any request body.
   */
  getDeletedAgents$Response(params?: GetDeletedAgents$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<DeletedAgent>>> {
    return getDeletedAgents(this.http, this.rootUrl, params, context);
  }

  /**
   * Get all deleted agents (deletion history).
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getDeletedAgents$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getDeletedAgents(params?: GetDeletedAgents$Params, context?: HttpContext): Observable<Array<DeletedAgent>> {
    return this.getDeletedAgents$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<DeletedAgent>>): Array<DeletedAgent> => r.body)
    );
  }

}
