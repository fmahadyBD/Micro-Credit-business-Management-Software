/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { approveWithdrawal } from '../fn/withdrawal-controller/approve-withdrawal';
import { ApproveWithdrawal$Params } from '../fn/withdrawal-controller/approve-withdrawal';
import { cancelWithdrawal } from '../fn/withdrawal-controller/cancel-withdrawal';
import { CancelWithdrawal$Params } from '../fn/withdrawal-controller/cancel-withdrawal';
import { getAllWithdrawalStatistics } from '../fn/withdrawal-controller/get-all-withdrawal-statistics';
import { GetAllWithdrawalStatistics$Params } from '../fn/withdrawal-controller/get-all-withdrawal-statistics';
import { getApprovedWithdrawals } from '../fn/withdrawal-controller/get-approved-withdrawals';
import { GetApprovedWithdrawals$Params } from '../fn/withdrawal-controller/get-approved-withdrawals';
import { getPendingWithdrawals } from '../fn/withdrawal-controller/get-pending-withdrawals';
import { GetPendingWithdrawals$Params } from '../fn/withdrawal-controller/get-pending-withdrawals';
import { getRecentWithdrawals } from '../fn/withdrawal-controller/get-recent-withdrawals';
import { GetRecentWithdrawals$Params } from '../fn/withdrawal-controller/get-recent-withdrawals';
import { getWithdrawalById } from '../fn/withdrawal-controller/get-withdrawal-by-id';
import { GetWithdrawalById$Params } from '../fn/withdrawal-controller/get-withdrawal-by-id';
import { getWithdrawalRequests } from '../fn/withdrawal-controller/get-withdrawal-requests';
import { GetWithdrawalRequests$Params } from '../fn/withdrawal-controller/get-withdrawal-requests';
import { getWithdrawalStatistics } from '../fn/withdrawal-controller/get-withdrawal-statistics';
import { GetWithdrawalStatistics$Params } from '../fn/withdrawal-controller/get-withdrawal-statistics';
import { markAsProcessed } from '../fn/withdrawal-controller/mark-as-processed';
import { MarkAsProcessed$Params } from '../fn/withdrawal-controller/mark-as-processed';
import { rejectWithdrawal } from '../fn/withdrawal-controller/reject-withdrawal';
import { RejectWithdrawal$Params } from '../fn/withdrawal-controller/reject-withdrawal';
import { requestWithdrawal } from '../fn/withdrawal-controller/request-withdrawal';
import { RequestWithdrawal$Params } from '../fn/withdrawal-controller/request-withdrawal';

@Injectable({ providedIn: 'root' })
export class WithdrawalControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `rejectWithdrawal()` */
  static readonly RejectWithdrawalPath = '/api/withdrawals/{requestId}/reject';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `rejectWithdrawal()` instead.
   *
   * This method doesn't expect any request body.
   */
  rejectWithdrawal$Response(params: RejectWithdrawal$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return rejectWithdrawal(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `rejectWithdrawal$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  rejectWithdrawal(params: RejectWithdrawal$Params, context?: HttpContext): Observable<{
}> {
    return this.rejectWithdrawal$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `markAsProcessed()` */
  static readonly MarkAsProcessedPath = '/api/withdrawals/{requestId}/process';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `markAsProcessed()` instead.
   *
   * This method doesn't expect any request body.
   */
  markAsProcessed$Response(params: MarkAsProcessed$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return markAsProcessed(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `markAsProcessed$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  markAsProcessed(params: MarkAsProcessed$Params, context?: HttpContext): Observable<{
}> {
    return this.markAsProcessed$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `cancelWithdrawal()` */
  static readonly CancelWithdrawalPath = '/api/withdrawals/{requestId}/cancel';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `cancelWithdrawal()` instead.
   *
   * This method doesn't expect any request body.
   */
  cancelWithdrawal$Response(params: CancelWithdrawal$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return cancelWithdrawal(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `cancelWithdrawal$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  cancelWithdrawal(params: CancelWithdrawal$Params, context?: HttpContext): Observable<{
}> {
    return this.cancelWithdrawal$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `approveWithdrawal()` */
  static readonly ApproveWithdrawalPath = '/api/withdrawals/{requestId}/approve';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `approveWithdrawal()` instead.
   *
   * This method doesn't expect any request body.
   */
  approveWithdrawal$Response(params: ApproveWithdrawal$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return approveWithdrawal(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `approveWithdrawal$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  approveWithdrawal(params: ApproveWithdrawal$Params, context?: HttpContext): Observable<{
}> {
    return this.approveWithdrawal$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `requestWithdrawal()` */
  static readonly RequestWithdrawalPath = '/api/withdrawals/request';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `requestWithdrawal()` instead.
   *
   * This method doesn't expect any request body.
   */
  requestWithdrawal$Response(params: RequestWithdrawal$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return requestWithdrawal(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `requestWithdrawal$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  requestWithdrawal(params: RequestWithdrawal$Params, context?: HttpContext): Observable<{
}> {
    return this.requestWithdrawal$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `getWithdrawalById()` */
  static readonly GetWithdrawalByIdPath = '/api/withdrawals/{requestId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getWithdrawalById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getWithdrawalById$Response(params: GetWithdrawalById$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return getWithdrawalById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getWithdrawalById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getWithdrawalById(params: GetWithdrawalById$Params, context?: HttpContext): Observable<{
}> {
    return this.getWithdrawalById$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `getAllWithdrawalStatistics()` */
  static readonly GetAllWithdrawalStatisticsPath = '/api/withdrawals/statistics';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllWithdrawalStatistics()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllWithdrawalStatistics$Response(params?: GetAllWithdrawalStatistics$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return getAllWithdrawalStatistics(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllWithdrawalStatistics$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllWithdrawalStatistics(params?: GetAllWithdrawalStatistics$Params, context?: HttpContext): Observable<{
}> {
    return this.getAllWithdrawalStatistics$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `getWithdrawalRequests()` */
  static readonly GetWithdrawalRequestsPath = '/api/withdrawals/shareholder/{shareholderId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getWithdrawalRequests()` instead.
   *
   * This method doesn't expect any request body.
   */
  getWithdrawalRequests$Response(params: GetWithdrawalRequests$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return getWithdrawalRequests(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getWithdrawalRequests$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getWithdrawalRequests(params: GetWithdrawalRequests$Params, context?: HttpContext): Observable<{
}> {
    return this.getWithdrawalRequests$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `getWithdrawalStatistics()` */
  static readonly GetWithdrawalStatisticsPath = '/api/withdrawals/shareholder/{shareholderId}/statistics';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getWithdrawalStatistics()` instead.
   *
   * This method doesn't expect any request body.
   */
  getWithdrawalStatistics$Response(params: GetWithdrawalStatistics$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return getWithdrawalStatistics(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getWithdrawalStatistics$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getWithdrawalStatistics(params: GetWithdrawalStatistics$Params, context?: HttpContext): Observable<{
}> {
    return this.getWithdrawalStatistics$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `getRecentWithdrawals()` */
  static readonly GetRecentWithdrawalsPath = '/api/withdrawals/shareholder/{shareholderId}/recent';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getRecentWithdrawals()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRecentWithdrawals$Response(params: GetRecentWithdrawals$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return getRecentWithdrawals(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getRecentWithdrawals$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRecentWithdrawals(params: GetRecentWithdrawals$Params, context?: HttpContext): Observable<{
}> {
    return this.getRecentWithdrawals$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `getPendingWithdrawals()` */
  static readonly GetPendingWithdrawalsPath = '/api/withdrawals/pending';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getPendingWithdrawals()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPendingWithdrawals$Response(params?: GetPendingWithdrawals$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return getPendingWithdrawals(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getPendingWithdrawals$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPendingWithdrawals(params?: GetPendingWithdrawals$Params, context?: HttpContext): Observable<{
}> {
    return this.getPendingWithdrawals$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `getApprovedWithdrawals()` */
  static readonly GetApprovedWithdrawalsPath = '/api/withdrawals/approved';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getApprovedWithdrawals()` instead.
   *
   * This method doesn't expect any request body.
   */
  getApprovedWithdrawals$Response(params?: GetApprovedWithdrawals$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return getApprovedWithdrawals(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getApprovedWithdrawals$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getApprovedWithdrawals(params?: GetApprovedWithdrawals$Params, context?: HttpContext): Observable<{
}> {
    return this.getApprovedWithdrawals$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

}
