/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createRequest } from '../fn/request-product-controller/create-request';
import { CreateRequest$Params } from '../fn/request-product-controller/create-request';
import { deleteRequest } from '../fn/request-product-controller/delete-request';
import { DeleteRequest$Params } from '../fn/request-product-controller/delete-request';
import { getAllRequests } from '../fn/request-product-controller/get-all-requests';
import { GetAllRequests$Params } from '../fn/request-product-controller/get-all-requests';
import { getRequestById } from '../fn/request-product-controller/get-request-by-id';
import { GetRequestById$Params } from '../fn/request-product-controller/get-request-by-id';
import { RequestProduct } from '../models/request-product';

@Injectable({ providedIn: 'root' })
export class RequestProductControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getAllRequests()` */
  static readonly GetAllRequestsPath = '/api/request-products';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllRequests()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllRequests$Response(params?: GetAllRequests$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<RequestProduct>>> {
    return getAllRequests(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllRequests$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllRequests(params?: GetAllRequests$Params, context?: HttpContext): Observable<Array<RequestProduct>> {
    return this.getAllRequests$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<RequestProduct>>): Array<RequestProduct> => r.body)
    );
  }

  /** Path part for operation `createRequest()` */
  static readonly CreateRequestPath = '/api/request-products';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createRequest()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createRequest$Response(params: CreateRequest$Params, context?: HttpContext): Observable<StrictHttpResponse<RequestProduct>> {
    return createRequest(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createRequest$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createRequest(params: CreateRequest$Params, context?: HttpContext): Observable<RequestProduct> {
    return this.createRequest$Response(params, context).pipe(
      map((r: StrictHttpResponse<RequestProduct>): RequestProduct => r.body)
    );
  }

  /** Path part for operation `getRequestById()` */
  static readonly GetRequestByIdPath = '/api/request-products/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getRequestById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRequestById$Response(params: GetRequestById$Params, context?: HttpContext): Observable<StrictHttpResponse<RequestProduct>> {
    return getRequestById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getRequestById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRequestById(params: GetRequestById$Params, context?: HttpContext): Observable<RequestProduct> {
    return this.getRequestById$Response(params, context).pipe(
      map((r: StrictHttpResponse<RequestProduct>): RequestProduct => r.body)
    );
  }

  /** Path part for operation `deleteRequest()` */
  static readonly DeleteRequestPath = '/api/request-products/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteRequest()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteRequest$Response(params: DeleteRequest$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteRequest(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteRequest$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteRequest(params: DeleteRequest$Params, context?: HttpContext): Observable<void> {
    return this.deleteRequest$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
