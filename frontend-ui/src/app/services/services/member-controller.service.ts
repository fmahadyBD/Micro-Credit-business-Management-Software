/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createMember } from '../fn/member-controller/create-member';
import { CreateMember$Params } from '../fn/member-controller/create-member';
import { deleteMember } from '../fn/member-controller/delete-member';
import { DeleteMember$Params } from '../fn/member-controller/delete-member';
import { getAllMembers } from '../fn/member-controller/get-all-members';
import { GetAllMembers$Params } from '../fn/member-controller/get-all-members';
import { getMemberById } from '../fn/member-controller/get-member-by-id';
import { GetMemberById$Params } from '../fn/member-controller/get-member-by-id';
import { Member } from '../models/member';

@Injectable({ providedIn: 'root' })
export class MemberControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getAllMembers()` */
  static readonly GetAllMembersPath = '/api/members';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllMembers()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllMembers$Response(params?: GetAllMembers$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Member>>> {
    return getAllMembers(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllMembers$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllMembers(params?: GetAllMembers$Params, context?: HttpContext): Observable<Array<Member>> {
    return this.getAllMembers$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Member>>): Array<Member> => r.body)
    );
  }

  /** Path part for operation `createMember()` */
  static readonly CreateMemberPath = '/api/members';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createMember()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createMember$Response(params: CreateMember$Params, context?: HttpContext): Observable<StrictHttpResponse<Member>> {
    return createMember(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createMember$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createMember(params: CreateMember$Params, context?: HttpContext): Observable<Member> {
    return this.createMember$Response(params, context).pipe(
      map((r: StrictHttpResponse<Member>): Member => r.body)
    );
  }

  /** Path part for operation `getMemberById()` */
  static readonly GetMemberByIdPath = '/api/members/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getMemberById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMemberById$Response(params: GetMemberById$Params, context?: HttpContext): Observable<StrictHttpResponse<Member>> {
    return getMemberById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getMemberById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMemberById(params: GetMemberById$Params, context?: HttpContext): Observable<Member> {
    return this.getMemberById$Response(params, context).pipe(
      map((r: StrictHttpResponse<Member>): Member => r.body)
    );
  }

  /** Path part for operation `deleteMember()` */
  static readonly DeleteMemberPath = '/api/members/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteMember()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteMember$Response(params: DeleteMember$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteMember(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteMember$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteMember(params: DeleteMember$Params, context?: HttpContext): Observable<void> {
    return this.deleteMember$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
