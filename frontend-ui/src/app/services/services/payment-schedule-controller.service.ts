/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addPayment } from '../fn/payment-schedule-controller/add-payment';
import { AddPayment$Params } from '../fn/payment-schedule-controller/add-payment';
import { advancePayment } from '../fn/payment-schedule-controller/advance-payment';
import { AdvancePayment$Params } from '../fn/payment-schedule-controller/advance-payment';
import { editPayment } from '../fn/payment-schedule-controller/edit-payment';
import { EditPayment$Params } from '../fn/payment-schedule-controller/edit-payment';
import { getOverdueSchedules } from '../fn/payment-schedule-controller/get-overdue-schedules';
import { GetOverdueSchedules$Params } from '../fn/payment-schedule-controller/get-overdue-schedules';
import { getPaymentSchedules } from '../fn/payment-schedule-controller/get-payment-schedules';
import { GetPaymentSchedules$Params } from '../fn/payment-schedule-controller/get-payment-schedules';
import { getPaymentTransactions } from '../fn/payment-schedule-controller/get-payment-transactions';
import { GetPaymentTransactions$Params } from '../fn/payment-schedule-controller/get-payment-transactions';
import { handlePartialPayment } from '../fn/payment-schedule-controller/handle-partial-payment';
import { HandlePartialPayment$Params } from '../fn/payment-schedule-controller/handle-partial-payment';
import { PaymentSchedule } from '../models/payment-schedule';
import { PaymentTransaction } from '../models/payment-transaction';
import { updatePaymentSchedule } from '../fn/payment-schedule-controller/update-payment-schedule';
import { UpdatePaymentSchedule$Params } from '../fn/payment-schedule-controller/update-payment-schedule';

@Injectable({ providedIn: 'root' })
export class PaymentScheduleControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updatePaymentSchedule()` */
  static readonly UpdatePaymentSchedulePath = '/api/payment-schedules/{scheduleId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updatePaymentSchedule()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updatePaymentSchedule$Response(params: UpdatePaymentSchedule$Params, context?: HttpContext): Observable<StrictHttpResponse<PaymentSchedule>> {
    return updatePaymentSchedule(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updatePaymentSchedule$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updatePaymentSchedule(params: UpdatePaymentSchedule$Params, context?: HttpContext): Observable<PaymentSchedule> {
    return this.updatePaymentSchedule$Response(params, context).pipe(
      map((r: StrictHttpResponse<PaymentSchedule>): PaymentSchedule => r.body)
    );
  }

  /** Path part for operation `editPayment()` */
  static readonly EditPaymentPath = '/api/payment-schedules/{scheduleId}/edit-payment';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `editPayment()` instead.
   *
   * This method doesn't expect any request body.
   */
  editPayment$Response(params: EditPayment$Params, context?: HttpContext): Observable<StrictHttpResponse<PaymentSchedule>> {
    return editPayment(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `editPayment$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  editPayment(params: EditPayment$Params, context?: HttpContext): Observable<PaymentSchedule> {
    return this.editPayment$Response(params, context).pipe(
      map((r: StrictHttpResponse<PaymentSchedule>): PaymentSchedule => r.body)
    );
  }

  /** Path part for operation `addPayment()` */
  static readonly AddPaymentPath = '/api/payment-schedules/{scheduleId}/pay';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addPayment()` instead.
   *
   * This method doesn't expect any request body.
   */
  addPayment$Response(params: AddPayment$Params, context?: HttpContext): Observable<StrictHttpResponse<PaymentSchedule>> {
    return addPayment(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addPayment$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  addPayment(params: AddPayment$Params, context?: HttpContext): Observable<PaymentSchedule> {
    return this.addPayment$Response(params, context).pipe(
      map((r: StrictHttpResponse<PaymentSchedule>): PaymentSchedule => r.body)
    );
  }

  /** Path part for operation `handlePartialPayment()` */
  static readonly HandlePartialPaymentPath = '/api/payment-schedules/{scheduleId}/partial-pay';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `handlePartialPayment()` instead.
   *
   * This method doesn't expect any request body.
   */
  handlePartialPayment$Response(params: HandlePartialPayment$Params, context?: HttpContext): Observable<StrictHttpResponse<PaymentSchedule>> {
    return handlePartialPayment(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `handlePartialPayment$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  handlePartialPayment(params: HandlePartialPayment$Params, context?: HttpContext): Observable<PaymentSchedule> {
    return this.handlePartialPayment$Response(params, context).pipe(
      map((r: StrictHttpResponse<PaymentSchedule>): PaymentSchedule => r.body)
    );
  }

  /** Path part for operation `advancePayment()` */
  static readonly AdvancePaymentPath = '/api/payment-schedules/{scheduleId}/advance-pay';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `advancePayment()` instead.
   *
   * This method doesn't expect any request body.
   */
  advancePayment$Response(params: AdvancePayment$Params, context?: HttpContext): Observable<StrictHttpResponse<PaymentSchedule>> {
    return advancePayment(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `advancePayment$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  advancePayment(params: AdvancePayment$Params, context?: HttpContext): Observable<PaymentSchedule> {
    return this.advancePayment$Response(params, context).pipe(
      map((r: StrictHttpResponse<PaymentSchedule>): PaymentSchedule => r.body)
    );
  }

  /** Path part for operation `getPaymentTransactions()` */
  static readonly GetPaymentTransactionsPath = '/api/payment-schedules/{scheduleId}/transactions';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getPaymentTransactions()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPaymentTransactions$Response(params: GetPaymentTransactions$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<PaymentTransaction>>> {
    return getPaymentTransactions(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getPaymentTransactions$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPaymentTransactions(params: GetPaymentTransactions$Params, context?: HttpContext): Observable<Array<PaymentTransaction>> {
    return this.getPaymentTransactions$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<PaymentTransaction>>): Array<PaymentTransaction> => r.body)
    );
  }

  /** Path part for operation `getOverdueSchedules()` */
  static readonly GetOverdueSchedulesPath = '/api/payment-schedules/overdue';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getOverdueSchedules()` instead.
   *
   * This method doesn't expect any request body.
   */
  getOverdueSchedules$Response(params?: GetOverdueSchedules$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<PaymentSchedule>>> {
    return getOverdueSchedules(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getOverdueSchedules$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getOverdueSchedules(params?: GetOverdueSchedules$Params, context?: HttpContext): Observable<Array<PaymentSchedule>> {
    return this.getOverdueSchedules$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<PaymentSchedule>>): Array<PaymentSchedule> => r.body)
    );
  }

  /** Path part for operation `getPaymentSchedules()` */
  static readonly GetPaymentSchedulesPath = '/api/payment-schedules/installment/{installmentId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getPaymentSchedules()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPaymentSchedules$Response(params: GetPaymentSchedules$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<PaymentSchedule>>> {
    return getPaymentSchedules(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getPaymentSchedules$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPaymentSchedules(params: GetPaymentSchedules$Params, context?: HttpContext): Observable<Array<PaymentSchedule>> {
    return this.getPaymentSchedules$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<PaymentSchedule>>): Array<PaymentSchedule> => r.body)
    );
  }

}
