/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addHistoricalEarning } from '../fn/shareholder-earning-controller/add-historical-earning';
import { AddHistoricalEarning$Params } from '../fn/shareholder-earning-controller/add-historical-earning';
import { calculateAllShareholdersEarnings } from '../fn/shareholder-earning-controller/calculate-all-shareholders-earnings';
import { CalculateAllShareholdersEarnings$Params } from '../fn/shareholder-earning-controller/calculate-all-shareholders-earnings';
import { calculateMonthlyEarnings } from '../fn/shareholder-earning-controller/calculate-monthly-earnings';
import { CalculateMonthlyEarnings$Params } from '../fn/shareholder-earning-controller/calculate-monthly-earnings';
import { getDashboardSummary } from '../fn/shareholder-earning-controller/get-dashboard-summary';
import { GetDashboardSummary$Params } from '../fn/shareholder-earning-controller/get-dashboard-summary';
import { getEarningSummary } from '../fn/shareholder-earning-controller/get-earning-summary';
import { GetEarningSummary$Params } from '../fn/shareholder-earning-controller/get-earning-summary';
import { getLast12MonthsEarnings } from '../fn/shareholder-earning-controller/get-last-12-months-earnings';
import { GetLast12MonthsEarnings$Params } from '../fn/shareholder-earning-controller/get-last-12-months-earnings';
import { getLastMonthEarnings } from '../fn/shareholder-earning-controller/get-last-month-earnings';
import { GetLastMonthEarnings$Params } from '../fn/shareholder-earning-controller/get-last-month-earnings';
import { getShareholderEarnings } from '../fn/shareholder-earning-controller/get-shareholder-earnings';
import { GetShareholderEarnings$Params } from '../fn/shareholder-earning-controller/get-shareholder-earnings';
import { recalculateMonthEarnings } from '../fn/shareholder-earning-controller/recalculate-month-earnings';
import { RecalculateMonthEarnings$Params } from '../fn/shareholder-earning-controller/recalculate-month-earnings';

@Injectable({ providedIn: 'root' })
export class ShareholderEarningControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `addHistoricalEarning()` */
  static readonly AddHistoricalEarningPath = '/api/earnings/{shareholderId}/add-historical';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addHistoricalEarning()` instead.
   *
   * This method doesn't expect any request body.
   */
  addHistoricalEarning$Response(params: AddHistoricalEarning$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return addHistoricalEarning(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addHistoricalEarning$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  addHistoricalEarning(params: AddHistoricalEarning$Params, context?: HttpContext): Observable<{
}> {
    return this.addHistoricalEarning$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `recalculateMonthEarnings()` */
  static readonly RecalculateMonthEarningsPath = '/api/earnings/recalculate';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `recalculateMonthEarnings()` instead.
   *
   * This method doesn't expect any request body.
   */
  recalculateMonthEarnings$Response(params: RecalculateMonthEarnings$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return recalculateMonthEarnings(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `recalculateMonthEarnings$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  recalculateMonthEarnings(params: RecalculateMonthEarnings$Params, context?: HttpContext): Observable<{
}> {
    return this.recalculateMonthEarnings$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `calculateMonthlyEarnings()` */
  static readonly CalculateMonthlyEarningsPath = '/api/earnings/calculate/{shareholderId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `calculateMonthlyEarnings()` instead.
   *
   * This method doesn't expect any request body.
   */
  calculateMonthlyEarnings$Response(params: CalculateMonthlyEarnings$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return calculateMonthlyEarnings(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `calculateMonthlyEarnings$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  calculateMonthlyEarnings(params: CalculateMonthlyEarnings$Params, context?: HttpContext): Observable<{
}> {
    return this.calculateMonthlyEarnings$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `calculateAllShareholdersEarnings()` */
  static readonly CalculateAllShareholdersEarningsPath = '/api/earnings/calculate-all';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `calculateAllShareholdersEarnings()` instead.
   *
   * This method doesn't expect any request body.
   */
  calculateAllShareholdersEarnings$Response(params: CalculateAllShareholdersEarnings$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return calculateAllShareholdersEarnings(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `calculateAllShareholdersEarnings$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  calculateAllShareholdersEarnings(params: CalculateAllShareholdersEarnings$Params, context?: HttpContext): Observable<{
}> {
    return this.calculateAllShareholdersEarnings$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `getShareholderEarnings()` */
  static readonly GetShareholderEarningsPath = '/api/earnings/{shareholderId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getShareholderEarnings()` instead.
   *
   * This method doesn't expect any request body.
   */
  getShareholderEarnings$Response(params: GetShareholderEarnings$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return getShareholderEarnings(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getShareholderEarnings$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getShareholderEarnings(params: GetShareholderEarnings$Params, context?: HttpContext): Observable<{
}> {
    return this.getShareholderEarnings$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `getEarningSummary()` */
  static readonly GetEarningSummaryPath = '/api/earnings/{shareholderId}/summary';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getEarningSummary()` instead.
   *
   * This method doesn't expect any request body.
   */
  getEarningSummary$Response(params: GetEarningSummary$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return getEarningSummary(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getEarningSummary$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getEarningSummary(params: GetEarningSummary$Params, context?: HttpContext): Observable<{
}> {
    return this.getEarningSummary$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `getLast12MonthsEarnings()` */
  static readonly GetLast12MonthsEarningsPath = '/api/earnings/{shareholderId}/last-12-months';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getLast12MonthsEarnings()` instead.
   *
   * This method doesn't expect any request body.
   */
  getLast12MonthsEarnings$Response(params: GetLast12MonthsEarnings$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return getLast12MonthsEarnings(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getLast12MonthsEarnings$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getLast12MonthsEarnings(params: GetLast12MonthsEarnings$Params, context?: HttpContext): Observable<{
}> {
    return this.getLast12MonthsEarnings$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `getLastMonthEarnings()` */
  static readonly GetLastMonthEarningsPath = '/api/earnings/last-month';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getLastMonthEarnings()` instead.
   *
   * This method doesn't expect any request body.
   */
  getLastMonthEarnings$Response(params?: GetLastMonthEarnings$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return getLastMonthEarnings(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getLastMonthEarnings$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getLastMonthEarnings(params?: GetLastMonthEarnings$Params, context?: HttpContext): Observable<{
}> {
    return this.getLastMonthEarnings$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `getDashboardSummary()` */
  static readonly GetDashboardSummaryPath = '/api/earnings/dashboard';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getDashboardSummary()` instead.
   *
   * This method doesn't expect any request body.
   */
  getDashboardSummary$Response(params?: GetDashboardSummary$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return getDashboardSummary(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getDashboardSummary$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getDashboardSummary(params?: GetDashboardSummary$Params, context?: HttpContext): Observable<{
}> {
    return this.getDashboardSummary$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

}
