/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createShareholder } from '../fn/shareholder-controller/create-shareholder';
import { CreateShareholder$Params } from '../fn/shareholder-controller/create-shareholder';
import { deleteShareholder } from '../fn/shareholder-controller/delete-shareholder';
import { DeleteShareholder$Params } from '../fn/shareholder-controller/delete-shareholder';
import { getAllShareholders } from '../fn/shareholder-controller/get-all-shareholders';
import { GetAllShareholders$Params } from '../fn/shareholder-controller/get-all-shareholders';
import { getShareholderById } from '../fn/shareholder-controller/get-shareholder-by-id';
import { GetShareholderById$Params } from '../fn/shareholder-controller/get-shareholder-by-id';
import { Shareholder } from '../models/shareholder';

@Injectable({ providedIn: 'root' })
export class ShareholderControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getAllShareholders()` */
  static readonly GetAllShareholdersPath = '/api/shareholders';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllShareholders()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllShareholders$Response(params?: GetAllShareholders$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Shareholder>>> {
    return getAllShareholders(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllShareholders$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllShareholders(params?: GetAllShareholders$Params, context?: HttpContext): Observable<Array<Shareholder>> {
    return this.getAllShareholders$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Shareholder>>): Array<Shareholder> => r.body)
    );
  }

  /** Path part for operation `createShareholder()` */
  static readonly CreateShareholderPath = '/api/shareholders';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createShareholder()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createShareholder$Response(params: CreateShareholder$Params, context?: HttpContext): Observable<StrictHttpResponse<Shareholder>> {
    return createShareholder(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createShareholder$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createShareholder(params: CreateShareholder$Params, context?: HttpContext): Observable<Shareholder> {
    return this.createShareholder$Response(params, context).pipe(
      map((r: StrictHttpResponse<Shareholder>): Shareholder => r.body)
    );
  }

  /** Path part for operation `getShareholderById()` */
  static readonly GetShareholderByIdPath = '/api/shareholders/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getShareholderById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getShareholderById$Response(params: GetShareholderById$Params, context?: HttpContext): Observable<StrictHttpResponse<Shareholder>> {
    return getShareholderById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getShareholderById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getShareholderById(params: GetShareholderById$Params, context?: HttpContext): Observable<Shareholder> {
    return this.getShareholderById$Response(params, context).pipe(
      map((r: StrictHttpResponse<Shareholder>): Shareholder => r.body)
    );
  }

  /** Path part for operation `deleteShareholder()` */
  static readonly DeleteShareholderPath = '/api/shareholders/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteShareholder()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteShareholder$Response(params: DeleteShareholder$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteShareholder(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteShareholder$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteShareholder(params: DeleteShareholder$Params, context?: HttpContext): Observable<void> {
    return this.deleteShareholder$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
