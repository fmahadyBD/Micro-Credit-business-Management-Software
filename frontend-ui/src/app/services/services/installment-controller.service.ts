/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createInstallment } from '../fn/installment-controller/create-installment';
import { CreateInstallment$Params } from '../fn/installment-controller/create-installment';
import { deleteInstallment } from '../fn/installment-controller/delete-installment';
import { DeleteInstallment$Params } from '../fn/installment-controller/delete-installment';
import { getAllInstallments } from '../fn/installment-controller/get-all-installments';
import { GetAllInstallments$Params } from '../fn/installment-controller/get-all-installments';
import { getInstallmentById } from '../fn/installment-controller/get-installment-by-id';
import { GetInstallmentById$Params } from '../fn/installment-controller/get-installment-by-id';
import { Installment } from '../models/installment';

@Injectable({ providedIn: 'root' })
export class InstallmentControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getAllInstallments()` */
  static readonly GetAllInstallmentsPath = '/api/installments';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllInstallments()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllInstallments$Response(params?: GetAllInstallments$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Installment>>> {
    return getAllInstallments(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllInstallments$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllInstallments(params?: GetAllInstallments$Params, context?: HttpContext): Observable<Array<Installment>> {
    return this.getAllInstallments$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Installment>>): Array<Installment> => r.body)
    );
  }

  /** Path part for operation `createInstallment()` */
  static readonly CreateInstallmentPath = '/api/installments';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createInstallment()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createInstallment$Response(params: CreateInstallment$Params, context?: HttpContext): Observable<StrictHttpResponse<Installment>> {
    return createInstallment(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createInstallment$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createInstallment(params: CreateInstallment$Params, context?: HttpContext): Observable<Installment> {
    return this.createInstallment$Response(params, context).pipe(
      map((r: StrictHttpResponse<Installment>): Installment => r.body)
    );
  }

  /** Path part for operation `getInstallmentById()` */
  static readonly GetInstallmentByIdPath = '/api/installments/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getInstallmentById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getInstallmentById$Response(params: GetInstallmentById$Params, context?: HttpContext): Observable<StrictHttpResponse<Installment>> {
    return getInstallmentById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getInstallmentById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getInstallmentById(params: GetInstallmentById$Params, context?: HttpContext): Observable<Installment> {
    return this.getInstallmentById$Response(params, context).pipe(
      map((r: StrictHttpResponse<Installment>): Installment => r.body)
    );
  }

  /** Path part for operation `deleteInstallment()` */
  static readonly DeleteInstallmentPath = '/api/installments/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteInstallment()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteInstallment$Response(params: DeleteInstallment$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteInstallment(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteInstallment$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteInstallment(params: DeleteInstallment$Params, context?: HttpContext): Observable<void> {
    return this.deleteInstallment$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
